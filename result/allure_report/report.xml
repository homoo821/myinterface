<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="10" hostname="PC-20181102DJCG" name="pytest" skipped="0" tests="10" time="21.338" timestamp="2020-08-06T22:14:33.583140"><testcase classname="test_case.test_login_pytest.TestHttp" file="test_case\test_login_pytest.py" line="17" name="test_http[test_data0]" time="1.050"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x07AB2590&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x08B847F0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x01702810&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x07AB2590&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x01702810&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=auto&amp;password=sdfsdfsdf&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x07AB2B70&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;
message_body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;
message_body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0(Windows NT 6.1)\r\nAccept-Encoding: gz...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 32\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x07AB2AB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x08B847F0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x07AB2590&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x08B847F0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x01702810&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x07AB2590&gt;
_stacktrace = &lt;traceback object at 0x0A39F288&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_login_pytest.TestHttp object at 0x07A37AB0&gt;
test_data = {&apos;ID&apos;: 1, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;auto&quot;,&quot;password&quot;:&quot;sdfsdfsdf&quot;}&apos;, &apos;exp&apos;: 0, &apos;header&apos;: &apos;{&quot;User-Agent&quot;:&quot;Mozilla/5.0(Window...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_login_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x07AB2AB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x08B847F0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x07AB2C70&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:37,683-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:1,标题:正常登录*/
</system-err></testcase><testcase classname="test_case.test_login_pytest.TestHttp" file="test_case\test_login_pytest.py" line="17" name="test_http[test_data1]" time="1.040"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5E8950&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;28&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5E88D0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5E8850&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5E8950&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5E8850&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=&amp;password=sdfsdfsdf&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;28&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5E8B30&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;28&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;28&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;
message_body = b&apos;username=&amp;password=sdfsdfsdf&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;
message_body = b&apos;username=&amp;password=sdfsdfsdf&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0(Windows NT 6.1)\r\nAccept-Encoding: gz...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 28\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A5E87B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5E88D0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5E8950&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;28&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5E88D0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5E8850&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5E8950&gt;
_stacktrace = &lt;traceback object at 0x0A46C620&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_login_pytest.TestHttp object at 0x0A549AB0&gt;
test_data = {&apos;ID&apos;: 2, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;&quot;,&quot;password&quot;:&quot;sdfsdfsdf&quot;}&apos;, &apos;exp&apos;: 1, &apos;header&apos;: &apos;{&quot;User-Agent&quot;:&quot;Mozilla/5.0(Windows NT...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_login_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A5E87B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5E88D0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5E8A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:39,997-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:2,标题:用户名为空登录*/
</system-err></testcase><testcase classname="test_case.test_login_pytest.TestHttp" file="test_case\test_login_pytest.py" line="17" name="test_http[test_data2]" time="1.046"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5C25F0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;23&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDA50&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDB50&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5C25F0&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDB50&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=auto&amp;password=&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip,...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;23&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDCF0&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;23&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=auto&amp;password=&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;23&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;
message_body = b&apos;username=auto&amp;password=&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;
message_body = b&apos;username=auto&amp;password=&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0(Windows NT 6.1)\r\nAccept-Encoding: gz...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 23\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A5C23B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDA50&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5C25F0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;23&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDA50&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDB50&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5C25F0&gt;
_stacktrace = &lt;traceback object at 0x0A695760&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_login_pytest.TestHttp object at 0x0A5BD6D0&gt;
test_data = {&apos;ID&apos;: 3, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;auto&quot;,&quot;password&quot;:&quot;&quot;}&apos;, &apos;exp&apos;: 1, &apos;header&apos;: &apos;{&quot;User-Agent&quot;:&quot;Mozilla/5.0(Windows NT 6.1)...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_login_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A5C23B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5BDA50&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5BDBD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:41,626-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:3,标题:密码为空登录*/
</system-err></testcase><testcase classname="test_case.test_login_pytest.TestHttp" file="test_case\test_login_pytest.py" line="17" name="test_http[test_data3]" time="1.061"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A6C8C30&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=1sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8B10&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8850&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A6C8C30&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8850&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=auto&amp;password=1sdfsdfsdf&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encodin...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8870&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=1sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=auto&amp;password=1sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;
message_body = b&apos;username=auto&amp;password=1sdfsdfsdf&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;
message_body = b&apos;username=auto&amp;password=1sdfsdfsdf&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0(Windows NT 6.1)\r\nAccept-Encoding: gz...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 33\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A6C8BB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8B10&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A6C8C30&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=1sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8B10&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8850&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A6C8C30&gt;
_stacktrace = &lt;traceback object at 0x07A77D78&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_login_pytest.TestHttp object at 0x0A6C82D0&gt;
test_data = {&apos;ID&apos;: 4, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;auto&quot;,&quot;password&quot;:&quot;1sdfsdfsdf&quot;}&apos;, &apos;exp&apos;: 1, &apos;header&apos;: &apos;{&quot;User-Agent&quot;:&quot;Mozilla/5.0(Windo...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_login_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A6C8BB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A6C8B10&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A6C86D0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:43,312-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:4,标题:密码错误登录*/
</system-err></testcase><testcase classname="test_case.test_login_pytest.TestHttp" file="test_case\test_login_pytest.py" line="17" name="test_http[test_data4]" time="1.031"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A622C70&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto1&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A622F30&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A622F90&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A622C70&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A622F90&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=auto1&amp;password=sdfsdfsdf&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encodin...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A622D90&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto1&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=auto1&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;
message_body = b&apos;username=auto1&amp;password=sdfsdfsdf&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;
message_body = b&apos;username=auto1&amp;password=sdfsdfsdf&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: Mozilla/5.0(Windows NT 6.1)\r\nAccept-Encoding: gz...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 33\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A6024B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A622F30&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A622C70&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto1&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0(Windows NT 6.1)&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;33&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A622F30&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A622F90&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A622C70&gt;
_stacktrace = &lt;traceback object at 0x0A3AF328&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_login_pytest.TestHttp object at 0x0A622AF0&gt;
test_data = {&apos;ID&apos;: 5, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;auto1&quot;,&quot;password&quot;:&quot;sdfsdfsdf&quot;}&apos;, &apos;exp&apos;: 1, &apos;header&apos;: &apos;{&quot;User-Agent&quot;:&quot;Mozilla/5.0(Windo...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_login_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A6024B0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A622F30&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A622CD0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:44,950-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:5,标题:用户名不存在登录*/
</system-err></testcase><testcase classname="test_case.test_add_course_pytest.TestHttp" file="test_case\test_add_course_pytest.py" line="17" name="test_http[test_data0]" time="1.046"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5912B0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A591590&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5916B0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5912B0&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A5916B0&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;username=auto&amp;password=sdfsdfsdf&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;g...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A591370&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/loginReq&apos;, body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;
message_body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;
message_body = b&apos;username=auto&amp;password=sdfsdfsdf&apos;, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;
data = b&apos;POST /api/mgr/loginReq HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, d...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 32\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A591730&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A591590&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5912B0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;
body = &apos;username=auto&amp;password=sdfsdfsdf&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;32&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A591590&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A5916B0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/loginReq&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A5912B0&gt;
_stacktrace = &lt;traceback object at 0x0A722E90&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_add_course_pytest.TestHttp object at 0x0A5910D0&gt;
test_data = {&apos;ID&apos;: 1, &apos;data&apos;: &apos;{&quot;username&quot;:&quot;auto&quot;,&quot;password&quot;:&quot;sdfsdfsdf&quot;}&apos;, &apos;exp&apos;: 0, &apos;header&apos;: &apos;{&quot;Content-Type&quot;:&quot;application/x-ww...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_add_course_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A591730&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A591590&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/loginReq (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A5913F0&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:46,620-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:1,标题:正常登录*/
</system-err></testcase><testcase classname="test_case.test_add_course_pytest.TestHttp" file="test_case\test_add_course_pytest.py" line="17" name="test_http[test_data1]" time="1.061"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A747AB0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;108&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A747B30&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A747B50&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A747AB0&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A747B50&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D...5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;108&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A747F90&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;108&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;108&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;
encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;
data = b&apos;POST /api/mgr/sq_mgr/ HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, de...bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 108\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A74F450&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A747B30&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A747AB0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22104%22%2C%22desc%22%3A%22104%22%2C%22display_idx%22%3A%22104%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;108&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A747B30&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A747B50&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A747AB0&gt;
_stacktrace = &lt;traceback object at 0x0A5E5EB8&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_add_course_pytest.TestHttp object at 0x0A747B70&gt;
test_data = {&apos;ID&apos;: 2, &apos;data&apos;: &apos;{&quot;action&quot;:&quot;add_course&quot;,&quot;data&quot;:\&apos;{&quot;name&quot;:&quot;104&quot;,&quot;desc&quot;:&quot;104&quot;,&quot;display_idx&quot;:&quot;104&quot;}\&apos;}&apos;, &apos;exp&apos;: 0, &apos;hea...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_add_course_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A74F450&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A747B30&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A747E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:48,228-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:2,标题:正常创建*/
</system-err></testcase><testcase classname="test_case.test_add_course_pytest.TestHttp" file="test_case\test_add_course_pytest.py" line="17" name="test_http[test_data2]" time="1.030"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A8718B0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;140&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A871FB0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A871DF0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A8718B0&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A871DF0&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%...5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;140&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A8716B0&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;140&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;140&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;
encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;
data = b&apos;POST /api/mgr/sq_mgr/ HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, de...bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 140\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A871EB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A871FB0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A8718B0&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%E8%AF%AD%E6%96%87%22%2C%22desc%22%3A%22yuwen%22%2C%22display_idx%22%3A%22%E8%AF%AD%E6%96%87%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;140&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A871FB0&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A871DF0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A8718B0&gt;
_stacktrace = &lt;traceback object at 0x0A46C418&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_add_course_pytest.TestHttp object at 0x0A871530&gt;
test_data = {&apos;ID&apos;: 3, &apos;data&apos;: &apos;{&quot;action&quot;:&quot;add_course&quot;,&quot;data&quot;:\&apos;{&quot;name&quot;:&quot;语文&quot;,&quot;desc&quot;:&quot;yuwen&quot;,&quot;display_idx&quot;:&quot;语文&quot;}\&apos;}&apos;, &apos;exp&apos;: 2, &apos;hea...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_add_course_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A871EB0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A871FB0&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A871A90&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:49,897-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:3,标题:重复创建*/
</system-err></testcase><testcase classname="test_case.test_add_course_pytest.TestHttp" file="test_case\test_add_course_pytest.py" line="17" name="test_http[test_data3]" time="1.018"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A92E990&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;105&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A92E890&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A92E730&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A92E990&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A92E730&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;, ...5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;105&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A92E4D0&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;105&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;105&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;
message_body = b&apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;
encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;
data = b&apos;POST /api/mgr/sq_mgr/ HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, de...bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 105\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A92ECF0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A92E890&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A92E990&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=add_course&amp;data=%7B%22name%22%3A%22%22%2C%22desc%22%3A%22105%22%2C%22display_idx%22%3A%22105%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;105&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A92E890&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0A92E730&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0A92E990&gt;
_stacktrace = &lt;traceback object at 0x07A75828&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_add_course_pytest.TestHttp object at 0x0A92E390&gt;
test_data = {&apos;ID&apos;: 4, &apos;data&apos;: &apos;{&quot;action&quot;:&quot;add_course&quot;,&quot;data&quot;:\&apos;{&quot;name&quot;:&quot;&quot;,&quot;desc&quot;:&quot;105&quot;,&quot;display_idx&quot;:&quot;105&quot;}\&apos;}&apos;, &apos;exp&apos;: 2, &apos;header...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_add_course_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A92ECF0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0A92E890&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0A92E830&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:51,656-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:4,标题:data的name为空创建*/
</system-err></testcase><testcase classname="test_case.test_add_course_pytest.TestHttp" file="test_case\test_add_course_pytest.py" line="17" name="test_http[test_data4]" time="1.045"><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))">self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;localhost&apos;, 80), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\util\connection.py:70: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0AA25E10&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;98&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0AA25050&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0AA250D0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:600: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0AA25E10&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0AA250D0&gt;, chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;, &apos;header...a5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;98&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0AA25110&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;98&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\program_files\Python\lib\http\client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;, method = &apos;POST&apos;
url = &apos;/api/mgr/sq_mgr/&apos;
body = b&apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;98&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;
message_body = b&apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\program_files\Python\lib\http\client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;
message_body = b&apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;
encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\program_files\Python\lib\http\client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;
data = b&apos;POST /api/mgr/sq_mgr/ HTTP/1.1\r\nHost: localhost\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, de...-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D\r\nContent-Length: 98\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\program_files\Python\lib\http\client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

..\..\program_files\Python\lib\site-packages\urllib3\connection.py:168: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0A934650&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0AA25050&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\program_files\Python\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0AA25E10&gt;
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;
body = &apos;action=&amp;data=%7B%22name%22%3A%22106%22%2C%22desc%22%3A%22106%22%2C%22display_idx%22%3A%22106%22%7D&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-aliv...fa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&apos;, &apos;Content-Length&apos;: &apos;98&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0AA25050&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0AA250D0&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\program_files\Python\lib\site-packages\urllib3\connectionpool.py:638: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/api/mgr/sq_mgr/&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0AA25E10&gt;
_stacktrace = &lt;traceback object at 0x07A6A4E0&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\urllib3\util\retry.py:398: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;test_case.test_add_course_pytest.TestHttp object at 0x0A8715F0&gt;
test_data = {&apos;ID&apos;: 5, &apos;data&apos;: &apos;{&quot;action&quot;:&quot;&quot;,&quot;data&quot;:\&apos;{&quot;name&quot;:&quot;106&quot;,&quot;desc&quot;:&quot;106&quot;,&quot;display_idx&quot;:&quot;106&quot;}\&apos;}&apos;, &apos;exp&apos;: 1, &apos;header&apos;: &apos;{&quot;C...harm-df2c00ac=f0bfa5fa-bf37-4140-9195-bc4a322fc2a1; goSessionid=j5wML4oBLTKoE18Y9aOkEN6IOYNK0vPEkYIorE-MZz8%3D&quot;}&apos;, ...}

    @pytest.mark.parametrize(&quot;test_data&quot;, test_data)
    def test_http(self, test_data):
    
        UserLogs().info(&apos;/*开始-&gt;ID:{0},标题:{1}*/&apos;.format(test_data[&apos;ID&apos;],test_data[&apos;title&apos;]))
&gt;       r = HttpRequest().http_request(test_data[&apos;url&apos;], eval(test_data[&quot;header&quot;]), eval(test_data[&apos;data&apos;]), test_data[&apos;method&apos;], getattr(GetData,&apos;Cookie&apos;))

test_case\test_add_course_pytest.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
api_test\http_request.py:15: in http_request
    r = requests.post(url=url, headers=header, data=data, cookies=cookies)
..\..\program_files\Python\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\program_files\Python\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0A934650&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0AA25050&gt;, verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;localhost&apos;, port=80): Max retries exceeded with url: /api/mgr/sq_mgr/ (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0AA25E50&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&apos;,))

..\..\program_files\Python\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>2020-08-06 22:14:53,283-INFO-user_log.py-homoo-日志信息:/*开始-&gt;ID:5,标题:action为空创建*/
</system-err></testcase></testsuite></testsuites>